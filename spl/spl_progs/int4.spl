breakpoint;
alias syscallNo R1;
alias usersp R0;
usersp=SP;
syscallNo=[[PTBR+2*((usersp-5)/512)]*512+(SP-5)%512];
alias processTableEntry R8;
processTableEntry=PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;
[processTableEntry+13]=usersp;
SP=[processTableEntry+11]*512-1;
alias physicalAddrRetVal R6;
physicalAddrRetVal=([PTBR+2*((usersp-1)/512)]*512)+((usersp-1)%512);

if(syscallNo==1) then
	
	[processTableEntry+9]=1;
	alias fileName R2;
	alias permiss R3;
	fileName=[[PTBR+2*((usersp-4)/512)]*512+(usersp-4)%512];
	permiss=[[PTBR+2*((usersp-3)/512)]*512+(usersp-3)%512];
	alias counter R4;
	alias inodeIndex R5;
	counter=0;
	inodeIndex=-1;
	
	while(counter<60) do
		if(([INODE_TABLE+counter*16+1]==-1)&&(inodeIndex==-1)) then
			inodeIndex=counter;
		endif;
		if(([INODE_TABLE+counter*16+1]==fileName)) then
			[physicalAddrRetVal]=0;
			[processTableEntry+9]=0;
			SP=[processTableEntry+13];
			
			ireturn;
			
		endif;
		counter=counter+1;
	endwhile;
	
	if(inodeIndex==-1) then
		[physicalAddrRetVal]=-1;
		[processTableEntry+9]=0;
		SP=[processTableEntry+13];
		
		ireturn;
	endif;
	breakpoint;
	alias inodeEntry R7;
	inodeEntry=INODE_TABLE+inodeIndex*16;
	
	[inodeEntry]=DATA;
	[inodeEntry+1]=fileName;
	[inodeEntry+2]=0;
	
	[inodeEntry+8]=-1;
	[inodeEntry+9]=-1;
	[inodeEntry+10]=-1;
	[inodeEntry+11]=-1;
	
	[inodeEntry+3]=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+3];
	[inodeEntry+4]=permiss;
	
	alias rootEntry R9;
	rootEntry=ROOT_FILE+inodeIndex*8;
	[rootEntry+0]=fileName;
	[rootEntry+1]=0;
	[rootEntry+2]=2;
	[rootEntry+3]=[USER_TABLE+[inodeEntry+3]*2];
	[rootEntry+4]=permiss;
	[physicalAddrRetVal]=0;
	[processTableEntry+9]=0;
	SP=[processTableEntry+13];
	breakpoint;
	ireturn;
	
endif;

if(syscallNo==4) then
	breakpoint;
	[processTableEntry+9]=4;
	alias fileName R2;
	fileName=[[PTBR+2*((usersp-4)/512)]*512+(usersp-4)%512];
	alias counter R4;
	alias inodeIndex R5;
	counter=0;
	inodeIndex=-1;
	while(counter<60) do
		if(([INODE_TABLE+counter*16+1]==fileName)) then
			inodeIndex=counter;
			break;
			
		endif;
		counter=counter+1;
	endwhile;
	
	if(counter==60) then
		[physicalAddrRetVal]=0;
		[processTableEntry+9]=0;
		SP=[processTableEntry+13];
		
		ireturn;
	endif;
	counter=inodeIndex;
	if(([INODE_TABLE+counter*16]!=DATA)) then
		[physicalAddrRetVal]=-1;
		[processTableEntry+9]=0;
		SP=[processTableEntry+13];
		
		ireturn;
	endif;
	
	if(([INODE_TABLE+counter*16+4]==0)) then
		if(([INODE_TABLE+counter*16+3]!=[PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+3])&&([PROCESS_TABLE+16*[SYSTEM_STATUS_TABLE+1]+3]!=1)) then
			[physicalAddrRetVal]=-1;
			[processTableEntry+9]=0;
			SP=[processTableEntry+13];
			
			ireturn;
			
		
		endif;
	endif;
	
	
	
	multipush(R0,R1,R2,R3,R4,R5,R6,R8);
	R1=4;
	R2=inodeIndex;
	R3=[SYSTEM_STATUS_TABLE+1];
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R8);
	
	if([FILE_STATUS_TABLE+1]!=-1) then
		[physicalAddrRetVal]=-2;
		[processTableEntry+9]=0;
		SP=[processTableEntry+13];
		
		ireturn;
	endif;
	
	
	counter=8;
	alias buffcounter R7;
	
	while(counter<12) do
		
		buffcounter=0;
		while(buffcounter<4) do
			if([BUFFER_TABLE+4*buffcounter]==[INODE_TABLE+inodeIndex*16+counter]) then
				[BUFFER_TABLE+4*buffcounter+1]=0;
			endif;
			buffcounter=buffcounter+1;
		endwhile;
	
		if([INODE_TABLE+inodeIndex*16+counter]!=-1) then
			multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
			R1=4;
			R2=[INODE_TABLE+inodeIndex*16+counter];
			R3=[SYSTEM_STATUS_TABLE+1];
			call MEMORY_MANAGER;
			multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
		
		endif;
		
		counter=counter+1;
	endwhile;
	
	alias inodeEntry R9;
	inodeEntry=INODE_TABLE+inodeIndex*16;
	counter=0;
	while(counter<16) do
		[inodeEntry+counter]=-1;
		counter=counter+1;
	endwhile;
	
	[inodeEntry+2]=0;
	
	[ROOT_FILE+inodeIndex*8+0]=-1;
	multipush(R0,R1,R2,R3,R4,R5,R6,R7,R8);
	R1=5;
	R2=inodeIndex;
	R3=[SYSTEM_STATUS_TABLE+1];
	call RESOURCE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R7,R8);
	
	[physicalAddrRetVal]=0;
	[processTableEntry+9]=0;
	SP=[processTableEntry+13];
	breakpoint;
	ireturn;


endif;
