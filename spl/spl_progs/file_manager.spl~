alias functionNum R1;

if(functionNum==2) then

	alias blockNo R2;
	alias offset R3;
	alias memAddr R4;
	
	alias buffNo R5;
	buffNo=(blockNo)%4;
	multipush(R1,R2,R3,R4,R5);
	R1=1;
	R2=buffNo;
	R3=[SYSTEM_STATUS_TABLE+1];
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4,R5);
	
	if([BUFFER_TABLE+4*buffNo]!=blockNo) then
		if([BUFFER_TABLE+4*buffNo+1]==1) then
			multipush(R1,R2,R3,R4,R5);
			R1=1;
			R2=[SYSTEM_STATUS_TABLE+1];
			R3=71+buffNo;
			R4=[BUFFER_TABLE+4*buffNo];
			call DEVICE_MANAGER;
			multipop(R1,R2,R3,R4,R5);
			[BUFFER_TABLE+4*buffNo+1]=0;
		endif;
		
		multipush(R1,R2,R3,R4,R5);
		R1=2;
		R2=[SYSTEM_STATUS_TABLE+1];
		R3=71+buffNo;
		R4=blockNo;
		call DEVICE_MANAGER;
		multipop(R1,R2,R3,R4,R5);
		
		[BUFFER_TABLE+4*buffNo]=blockNo;
		
	endif;
	
	[memAddr]=[71+buffNo+offset];
	multipush(R1,R2,R3,R4,R5);
	R1=2;
	R2=buffNo;
	R3=[SYSTEM_STATUS_TABLE+1];
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4,R5);
	
	return;

endif;

if(functionNum==3) then
	alias fileName R2;
	alias counter R3;
	counter=0;
	alias inodeIndex R4;
	while(counter<60) do
		if([INODE_TABLE+16*counter+1]==fileName) then
			inodeIndex=counter;
			break;
		endif;
		counter=counter+1;
	endwhile;
	if(counter==60) then
		R0=-1;
		return;
	endif;
	
	multipush(R1,R2,R3,R4);
	R1=4;
	R2=inodeIndex;
	R3=[SYSTEM_STATUS_TABLE+1];
	call RESOURCE_MANAGER;
	if(R0==-1) then
		R0=-1;
		return;
	
	endif;
	multipop(R1,R2,R3,R4);
	
	if([INODE_TABLE+16*counter]==EXEC) then
		R1=5;
		R2=inodeIndex;
		R3=[SYSTEM_STATUS_TABLE+1];
		call RESOURCE_MANAGER;
		R0=-1;
		return;
	endif;
	
	counter=0;
	alias openFileTableIndex R5;
	while(counter<32) do
		if([OPEN_FILE_TABLE+4*counter]==-1) then
			openFileTableIndex=counter;
			break;
		endif;
		counter=counter+1;
	endwhile;
	
	if(counter==32) then
		R0=-2;
		return;
	endif;
	
	
	if(fileName=="root") then
		[OPEN_FILE_TABLE+4*openFileTableIndex]=INODE_ROOT;
	else
		if([FILE_STATUS_TABLE+inodeIndex*4+1]==-1) then
			[FILE_STATUS_TABLE+inodeIndex*4+1]=1;
		else
			[FILE_STATUS_TABLE+inodeIndex*4+1]=[FILE_STATUS_TABLE+inodeIndex*4+1]+1;
			[OPEN_FILE_TABLE+4*openFileTableIndex]=inodeIndex;
		endif;
	endif;
	
	[OPEN_FILE_TABLE+4*openFileTableIndex+1]=1;
	[OPEN_FILE_TABLE+4*openFileTableIndex+1]=0;
	multipush(R1,R2,R3,R4,R5);
	R1=5;
	R2=inodeIndex;
	R3=[SYSTEM_STATUS_TABLE+1];
	call RESOURCE_MANAGER;
	multipop(R1,R2,R3,R4,R5);
	R0=openFileTableIndex;
	return;
	
	
endif;

if(functionNum==4) then
	alias fileTableIndex R2;
	alias inodeIndex R3;
	inodeIndex=[OPEN_FILE_TABLE+4*inodeIndex];
	[OPEN_FILE_TABLE+4*inodeIndex+1]=[OPEN_FILE_TABLE+4*inodeIndex+1]-1;
	if([OPEN_FILE_TABLE+4*inodeIndex+1]==0) then
		[OPEN_FILE_TABLE+4*inodeIndex]=-1;
		[OPEN_FILE_TABLE+4*inodeIndex+1]=-1;
		[OPEN_FILE_TABLE+4*inodeIndex+2]=-1;
		if([INODE_TABLE+inodeIndex*16+1]!="root") then
			[FILE_STATUS_TABLE+4*inodeIndex+1]=[FILE_STATUS_TABLE+4*inodeIndex+1]-1;
			if([FILE_STATUS_TABLE+4*inodeIndex+1]==0) then
				[FILE_STATUS_TABLE+4*inodeIndex+1]=-1;
			endif;
		endif;
		
		
	endif;
	
	return;
	


endif;
