breakpoint;
alias syscallNo R1;
alias usersp R0;
usersp=SP;
syscallNo=[[PTBR+2*((usersp-5)/512)]*512+(SP-5)%512];
alias processTableEntry R8;
processTableEntry=PROCESS_TABLE+[SYSTEM_STATUS_TABLE+1]*16;
[processTableEntry+13]=usersp;
SP=[processTableEntry+11]*512-1;
alias physicalAddrRetVal R6;
physicalAddrRetVal=([PTBR+2*((usersp-1)/512)]*512)+((usersp-1)%512);
if(syscallNo==27) then
	breakpoint;
	[processTableEntry+9]=27;
	alias userName R2;
	userName=[[PTBR+2*((usersp-4)/512)]*512+(usersp-4)%512];
	alias passWord R3;
	passWord=[[PTBR+2*((usersp-3)/512)]*512+(usersp-3)%512];
	
	if([SYSTEM_STATUS_TABLE+1]!=1) then
		[physicalAddrRetVal]=-2;
		SP=[processTableEntry+13];
		[processTableEntry+9]=0;
		ireturn;
	endif;
	
	alias userId R4;
	userId=0;
	alias userTableEntry R5;
	userTableEntry=-1;
	while(userId<16) do
		if([USER_TABLE+2*userId]==userName) then
			userTableEntry=USER_TABLE+2*userId;
			break;
		
		endif;
		
		userId=userId+1;
	endwhile;
	
	if(userId==16) then
		[physicalAddrRetVal]=-1;
		SP=[processTableEntry+13];
		[processTableEntry+9]=0;
		ireturn;
	endif;
	
	encrypt passWord;
	if(passWord!=[userTableEntry+1]) then
		[physicalAddrRetVal]=-1;
		SP=[processTableEntry+13];
		[processTableEntry+9]=0;
		ireturn;
	
	endif;
	
	[PROCESS_TABLE+16*2+4]=CREATED;
	[PROCESS_TABLE+16*2+3]=userId;
	
	[processTableEntry+4]=WAIT_PROCESS;
	[processTableEntry+5]=2;
	[SYSTEM_STATUS_TABLE+0]=userId;
	multipush(R0,R1,R2,R3,R4,R5,R6,R8);
	call SCHEDULER;
	multipop(R0,R1,R2,R3,R4,R5,R6,R8);
	[physicalAddrRetVal]=0;
	SP=[processTableEntry+13];
	[processTableEntry+9]=0;
	ireturn;

endif;


	
